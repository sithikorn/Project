'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace ws_securityuser
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="SecurityUserSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class SecurityUser
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CheckPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActiveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetByEmployeeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBySecurityUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReadSchemaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SSL___ProjectMaintenance.My.MySettings.Default.SSL___ProjectMaintenance_ws_securityuser_SecurityUser
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddCompleted As AddCompletedEventHandler
        
        '''<remarks/>
        Public Event CheckPasswordCompleted As CheckPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCompleted As DeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActiveCompleted As GetActiveCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllCompleted As GetAllCompletedEventHandler
        
        '''<remarks/>
        Public Event GetByEmployeeCompleted As GetByEmployeeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBySecurityUserCompleted As GetBySecurityUserCompletedEventHandler
        
        '''<remarks/>
        Public Event ReadSchemaCompleted As ReadSchemaCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCompleted As SaveCompletedEventHandler
        
        '''<remarks/>
        Public Event SetPasswordCompleted As SetPasswordCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Add", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Add(ByVal XMLINPUT As String, ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("Add", New Object() {XMLINPUT, XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal XMLINPUT As String, ByVal XMLSTRING As String)
            Me.AddAsync(XMLINPUT, XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal XMLINPUT As String, ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.AddOperationCompleted Is Nothing) Then
                Me.AddOperationCompleted = AddressOf Me.OnAddOperationCompleted
            End If
            Me.InvokeAsync("Add", New Object() {XMLINPUT, XMLSTRING}, Me.AddOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCompleted(Me, New AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckPassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckPassword(ByVal SEC_USER As String, ByVal PASSWORD_ As String, ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("CheckPassword", New Object() {SEC_USER, PASSWORD_, XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CheckPasswordAsync(ByVal SEC_USER As String, ByVal PASSWORD_ As String, ByVal XMLSTRING As String)
            Me.CheckPasswordAsync(SEC_USER, PASSWORD_, XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CheckPasswordAsync(ByVal SEC_USER As String, ByVal PASSWORD_ As String, ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.CheckPasswordOperationCompleted Is Nothing) Then
                Me.CheckPasswordOperationCompleted = AddressOf Me.OnCheckPasswordOperationCompleted
            End If
            Me.InvokeAsync("CheckPassword", New Object() {SEC_USER, PASSWORD_, XMLSTRING}, Me.CheckPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCheckPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CheckPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CheckPasswordCompleted(Me, New CheckPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete(ByVal XMLINPUT As String, ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("Delete", New Object() {XMLINPUT, XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal XMLINPUT As String, ByVal XMLSTRING As String)
            Me.DeleteAsync(XMLINPUT, XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal XMLINPUT As String, ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.DeleteOperationCompleted Is Nothing) Then
                Me.DeleteOperationCompleted = AddressOf Me.OnDeleteOperationCompleted
            End If
            Me.InvokeAsync("Delete", New Object() {XMLINPUT, XMLSTRING}, Me.DeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCompleted(Me, New DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActive", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActive(ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("GetActive", New Object() {XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActiveAsync(ByVal XMLSTRING As String)
            Me.GetActiveAsync(XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActiveAsync(ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.GetActiveOperationCompleted Is Nothing) Then
                Me.GetActiveOperationCompleted = AddressOf Me.OnGetActiveOperationCompleted
            End If
            Me.InvokeAsync("GetActive", New Object() {XMLSTRING}, Me.GetActiveOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActiveOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActiveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActiveCompleted(Me, New GetActiveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAll", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAll(ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("GetAll", New Object() {XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllAsync(ByVal XMLSTRING As String)
            Me.GetAllAsync(XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllAsync(ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.GetAllOperationCompleted Is Nothing) Then
                Me.GetAllOperationCompleted = AddressOf Me.OnGetAllOperationCompleted
            End If
            Me.InvokeAsync("GetAll", New Object() {XMLSTRING}, Me.GetAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllCompleted(Me, New GetAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetByEmployee", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetByEmployee(ByVal EMPLOYEE As String, ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("GetByEmployee", New Object() {EMPLOYEE, XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetByEmployeeAsync(ByVal EMPLOYEE As String, ByVal XMLSTRING As String)
            Me.GetByEmployeeAsync(EMPLOYEE, XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetByEmployeeAsync(ByVal EMPLOYEE As String, ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.GetByEmployeeOperationCompleted Is Nothing) Then
                Me.GetByEmployeeOperationCompleted = AddressOf Me.OnGetByEmployeeOperationCompleted
            End If
            Me.InvokeAsync("GetByEmployee", New Object() {EMPLOYEE, XMLSTRING}, Me.GetByEmployeeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetByEmployeeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetByEmployeeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetByEmployeeCompleted(Me, New GetByEmployeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBySecurityUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBySecurityUser(ByVal SEC_USER As String, ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("GetBySecurityUser", New Object() {SEC_USER, XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBySecurityUserAsync(ByVal SEC_USER As String, ByVal XMLSTRING As String)
            Me.GetBySecurityUserAsync(SEC_USER, XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBySecurityUserAsync(ByVal SEC_USER As String, ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.GetBySecurityUserOperationCompleted Is Nothing) Then
                Me.GetBySecurityUserOperationCompleted = AddressOf Me.OnGetBySecurityUserOperationCompleted
            End If
            Me.InvokeAsync("GetBySecurityUser", New Object() {SEC_USER, XMLSTRING}, Me.GetBySecurityUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBySecurityUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBySecurityUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBySecurityUserCompleted(Me, New GetBySecurityUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReadSchema", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReadSchema(ByRef XMLSchema As String) As String
            Dim results() As Object = Me.Invoke("ReadSchema", New Object() {XMLSchema})
            XMLSchema = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReadSchemaAsync(ByVal XMLSchema As String)
            Me.ReadSchemaAsync(XMLSchema, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReadSchemaAsync(ByVal XMLSchema As String, ByVal userState As Object)
            If (Me.ReadSchemaOperationCompleted Is Nothing) Then
                Me.ReadSchemaOperationCompleted = AddressOf Me.OnReadSchemaOperationCompleted
            End If
            Me.InvokeAsync("ReadSchema", New Object() {XMLSchema}, Me.ReadSchemaOperationCompleted, userState)
        End Sub
        
        Private Sub OnReadSchemaOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReadSchemaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReadSchemaCompleted(Me, New ReadSchemaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Save", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Save(ByVal XMLINPUT As String, ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("Save", New Object() {XMLINPUT, XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveAsync(ByVal XMLINPUT As String, ByVal XMLSTRING As String)
            Me.SaveAsync(XMLINPUT, XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveAsync(ByVal XMLINPUT As String, ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.SaveOperationCompleted Is Nothing) Then
                Me.SaveOperationCompleted = AddressOf Me.OnSaveOperationCompleted
            End If
            Me.InvokeAsync("Save", New Object() {XMLINPUT, XMLSTRING}, Me.SaveOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCompleted(Me, New SaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPassword", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetPassword(ByVal SEC_USER As String, ByVal PASSWORD_ As String, ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("SetPassword", New Object() {SEC_USER, PASSWORD_, XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetPasswordAsync(ByVal SEC_USER As String, ByVal PASSWORD_ As String, ByVal XMLSTRING As String)
            Me.SetPasswordAsync(SEC_USER, PASSWORD_, XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPasswordAsync(ByVal SEC_USER As String, ByVal PASSWORD_ As String, ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.SetPasswordOperationCompleted Is Nothing) Then
                Me.SetPasswordOperationCompleted = AddressOf Me.OnSetPasswordOperationCompleted
            End If
            Me.InvokeAsync("SetPassword", New Object() {SEC_USER, PASSWORD_, XMLSTRING}, Me.SetPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPasswordCompleted(Me, New SetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddCompletedEventHandler(ByVal sender As Object, ByVal e As AddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CheckPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As CheckPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CheckPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetActiveCompletedEventHandler(ByVal sender As Object, ByVal e As GetActiveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActiveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAllCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetByEmployeeCompletedEventHandler(ByVal sender As Object, ByVal e As GetByEmployeeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetByEmployeeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetBySecurityUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetBySecurityUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBySecurityUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ReadSchemaCompletedEventHandler(ByVal sender As Object, ByVal e As ReadSchemaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReadSchemaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSchema() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SetPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As SetPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace

'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace ws_DatabaseDescription
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="DatabaseDescriptionSoap", [Namespace]:="http://SSLVMSQL1/DatabaseDescription")>  _
    Partial Public Class DatabaseDescription
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private AddOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ExecuteSQLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetByTableNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetGroupByTableNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLookUpDataByProcedureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.SSL___ProjectMaintenance.My.MySettings.Default.SSL___ProjectMaintenance_ws_DatabaseDescription_DatabaseDescription
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event AddCompleted As AddCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteCompleted As DeleteCompletedEventHandler
        
        '''<remarks/>
        Public Event ExecuteSQLCompleted As ExecuteSQLCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllCompleted As GetAllCompletedEventHandler
        
        '''<remarks/>
        Public Event GetByTableNameCompleted As GetByTableNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetGroupByTableNameCompleted As GetGroupByTableNameCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveCompleted As SaveCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLookUpDataByProcedureCompleted As GetLookUpDataByProcedureCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SSLVMSQL1/DatabaseDescription/Add", RequestNamespace:="http://SSLVMSQL1/DatabaseDescription", ResponseNamespace:="http://SSLVMSQL1/DatabaseDescription", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Add(ByVal xmlInput As String, ByRef xmlString As String) As String
            Dim results() As Object = Me.Invoke("Add", New Object() {xmlInput, xmlString})
            xmlString = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal xmlInput As String, ByVal xmlString As String)
            Me.AddAsync(xmlInput, xmlString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AddAsync(ByVal xmlInput As String, ByVal xmlString As String, ByVal userState As Object)
            If (Me.AddOperationCompleted Is Nothing) Then
                Me.AddOperationCompleted = AddressOf Me.OnAddOperationCompleted
            End If
            Me.InvokeAsync("Add", New Object() {xmlInput, xmlString}, Me.AddOperationCompleted, userState)
        End Sub
        
        Private Sub OnAddOperationCompleted(ByVal arg As Object)
            If (Not (Me.AddCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AddCompleted(Me, New AddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SSLVMSQL1/DatabaseDescription/Delete", RequestNamespace:="http://SSLVMSQL1/DatabaseDescription", ResponseNamespace:="http://SSLVMSQL1/DatabaseDescription", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Delete(ByVal xmlInput As String, ByRef xmlString As String) As String
            Dim results() As Object = Me.Invoke("Delete", New Object() {xmlInput, xmlString})
            xmlString = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal xmlInput As String, ByVal xmlString As String)
            Me.DeleteAsync(xmlInput, xmlString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteAsync(ByVal xmlInput As String, ByVal xmlString As String, ByVal userState As Object)
            If (Me.DeleteOperationCompleted Is Nothing) Then
                Me.DeleteOperationCompleted = AddressOf Me.OnDeleteOperationCompleted
            End If
            Me.InvokeAsync("Delete", New Object() {xmlInput, xmlString}, Me.DeleteOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteCompleted(Me, New DeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SSLVMSQL1/DatabaseDescription/ExecuteSQL", RequestNamespace:="http://SSLVMSQL1/DatabaseDescription", ResponseNamespace:="http://SSLVMSQL1/DatabaseDescription", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ExecuteSQL(ByVal STRCOMMAND As String, ByRef xmlString As String) As String
            Dim results() As Object = Me.Invoke("ExecuteSQL", New Object() {STRCOMMAND, xmlString})
            xmlString = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ExecuteSQLAsync(ByVal STRCOMMAND As String, ByVal xmlString As String)
            Me.ExecuteSQLAsync(STRCOMMAND, xmlString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ExecuteSQLAsync(ByVal STRCOMMAND As String, ByVal xmlString As String, ByVal userState As Object)
            If (Me.ExecuteSQLOperationCompleted Is Nothing) Then
                Me.ExecuteSQLOperationCompleted = AddressOf Me.OnExecuteSQLOperationCompleted
            End If
            Me.InvokeAsync("ExecuteSQL", New Object() {STRCOMMAND, xmlString}, Me.ExecuteSQLOperationCompleted, userState)
        End Sub
        
        Private Sub OnExecuteSQLOperationCompleted(ByVal arg As Object)
            If (Not (Me.ExecuteSQLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ExecuteSQLCompleted(Me, New ExecuteSQLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SSLVMSQL1/DatabaseDescription/GetAll", RequestNamespace:="http://SSLVMSQL1/DatabaseDescription", ResponseNamespace:="http://SSLVMSQL1/DatabaseDescription", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAll(ByRef xmlString As String) As String
            Dim results() As Object = Me.Invoke("GetAll", New Object() {xmlString})
            xmlString = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllAsync(ByVal xmlString As String)
            Me.GetAllAsync(xmlString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllAsync(ByVal xmlString As String, ByVal userState As Object)
            If (Me.GetAllOperationCompleted Is Nothing) Then
                Me.GetAllOperationCompleted = AddressOf Me.OnGetAllOperationCompleted
            End If
            Me.InvokeAsync("GetAll", New Object() {xmlString}, Me.GetAllOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllCompleted(Me, New GetAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SSLVMSQL1/DatabaseDescription/GetByTableName", RequestNamespace:="http://SSLVMSQL1/DatabaseDescription", ResponseNamespace:="http://SSLVMSQL1/DatabaseDescription", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetByTableName(ByVal TableName As String, ByRef xmlString As String) As String
            Dim results() As Object = Me.Invoke("GetByTableName", New Object() {TableName, xmlString})
            xmlString = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetByTableNameAsync(ByVal TableName As String, ByVal xmlString As String)
            Me.GetByTableNameAsync(TableName, xmlString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetByTableNameAsync(ByVal TableName As String, ByVal xmlString As String, ByVal userState As Object)
            If (Me.GetByTableNameOperationCompleted Is Nothing) Then
                Me.GetByTableNameOperationCompleted = AddressOf Me.OnGetByTableNameOperationCompleted
            End If
            Me.InvokeAsync("GetByTableName", New Object() {TableName, xmlString}, Me.GetByTableNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetByTableNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetByTableNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetByTableNameCompleted(Me, New GetByTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SSLVMSQL1/DatabaseDescription/GetGroupByTableName", RequestNamespace:="http://SSLVMSQL1/DatabaseDescription", ResponseNamespace:="http://SSLVMSQL1/DatabaseDescription", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetGroupByTableName(ByVal TableName As String, ByRef xmlString As String) As String
            Dim results() As Object = Me.Invoke("GetGroupByTableName", New Object() {TableName, xmlString})
            xmlString = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetGroupByTableNameAsync(ByVal TableName As String, ByVal xmlString As String)
            Me.GetGroupByTableNameAsync(TableName, xmlString, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetGroupByTableNameAsync(ByVal TableName As String, ByVal xmlString As String, ByVal userState As Object)
            If (Me.GetGroupByTableNameOperationCompleted Is Nothing) Then
                Me.GetGroupByTableNameOperationCompleted = AddressOf Me.OnGetGroupByTableNameOperationCompleted
            End If
            Me.InvokeAsync("GetGroupByTableName", New Object() {TableName, xmlString}, Me.GetGroupByTableNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetGroupByTableNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetGroupByTableNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetGroupByTableNameCompleted(Me, New GetGroupByTableNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SSLVMSQL1/DatabaseDescription/Save", RequestNamespace:="http://SSLVMSQL1/DatabaseDescription", ResponseNamespace:="http://SSLVMSQL1/DatabaseDescription", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Save(ByVal XMLINPUT As String, ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("Save", New Object() {XMLINPUT, XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveAsync(ByVal XMLINPUT As String, ByVal XMLSTRING As String)
            Me.SaveAsync(XMLINPUT, XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveAsync(ByVal XMLINPUT As String, ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.SaveOperationCompleted Is Nothing) Then
                Me.SaveOperationCompleted = AddressOf Me.OnSaveOperationCompleted
            End If
            Me.InvokeAsync("Save", New Object() {XMLINPUT, XMLSTRING}, Me.SaveOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveCompleted(Me, New SaveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://SSLVMSQL1/DatabaseDescription/GetLookUpDataByProcedure", RequestNamespace:="http://SSLVMSQL1/DatabaseDescription", ResponseNamespace:="http://SSLVMSQL1/DatabaseDescription", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLookUpDataByProcedure(ByVal Procedure As String, ByRef XMLSTRING As String) As String
            Dim results() As Object = Me.Invoke("GetLookUpDataByProcedure", New Object() {Procedure, XMLSTRING})
            XMLSTRING = CType(results(1),String)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLookUpDataByProcedureAsync(ByVal Procedure As String, ByVal XMLSTRING As String)
            Me.GetLookUpDataByProcedureAsync(Procedure, XMLSTRING, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLookUpDataByProcedureAsync(ByVal Procedure As String, ByVal XMLSTRING As String, ByVal userState As Object)
            If (Me.GetLookUpDataByProcedureOperationCompleted Is Nothing) Then
                Me.GetLookUpDataByProcedureOperationCompleted = AddressOf Me.OnGetLookUpDataByProcedureOperationCompleted
            End If
            Me.InvokeAsync("GetLookUpDataByProcedure", New Object() {Procedure, XMLSTRING}, Me.GetLookUpDataByProcedureOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLookUpDataByProcedureOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLookUpDataByProcedureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLookUpDataByProcedureCompleted(Me, New GetLookUpDataByProcedureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub AddCompletedEventHandler(ByVal sender As Object, ByVal e As AddCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AddCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmlString() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub DeleteCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmlString() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub ExecuteSQLCompletedEventHandler(ByVal sender As Object, ByVal e As ExecuteSQLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ExecuteSQLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmlString() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetAllCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmlString() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetByTableNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetByTableNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetByTableNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmlString() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetGroupByTableNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetGroupByTableNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetGroupByTableNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property xmlString() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub SaveCompletedEventHandler(ByVal sender As Object, ByVal e As SaveCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub GetLookUpDataByProcedureCompletedEventHandler(ByVal sender As Object, ByVal e As GetLookUpDataByProcedureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLookUpDataByProcedureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property XMLSTRING() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
    End Class
End Namespace
